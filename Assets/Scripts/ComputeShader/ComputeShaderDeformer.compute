// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Deformer

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> originalVertices;
RWStructuredBuffer<float3> displacedVertices;
RWStructuredBuffer<float3> vertexVelocities;
float time;
float damping;
float springForce;
float uniformScale;

[numthreads(1024, 1, 1)]
void Deformer(uint3 id : SV_DispatchThreadID)
{
	float3 velocity = vertexVelocities[id.x];
	float3 displacement = displacedVertices[id.x] - originalVertices[id.x];
	displacement *= uniformScale;
	velocity -= displacement * springForce * time;
	velocity *= 1.0f - damping * time;

	//if (transform.position.sqrMagnitude > maxRange * maxRange)
	//	transform.position = transform.position.normalized * maxRange;

	//velocity = (velocity.sqrMagnitude > 20.0f * 20.0f) ? velocity.normalized * 20.0f : velocity;

	// normalize(x) normalize(velocity)
	normalize(velocity);
	//velocity = clampMagnitude(velocity, 20.0f);
	vertexVelocities[id.x] = velocity;
	displacedVertices[id.x] += velocity * (time / uniformScale);
}
